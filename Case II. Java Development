{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MlPcT_S1Ktuh"
      },
      "source": [
        "# ***Group 13 - Case II***"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xhvLvYMFtSdc"
      },
      "source": [
        "# Setup\n",
        "Set directory locations."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3yFv6uqxrvGF",
        "outputId": "204ec52f-b643-4aac-ab35-28e4fb035b17"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount(\"/content/drive\", force_remount=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KldaFd7VtcIX"
      },
      "source": [
        "# Load Python Settings\n",
        "Common imports, defaults for formatting in Matplotlib, Pandas etc."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M0xHex-RIz5Q",
        "outputId": "d41eea40-1447-4897-e9c0-6ecc39589cc7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: nltk in /usr/local/lib/python3.9/dist-packages (3.8.1)\n",
            "Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.9/dist-packages (from nltk) (2022.10.31)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.9/dist-packages (from nltk) (4.65.0)\n",
            "Requirement already satisfied: click in /usr/local/lib/python3.9/dist-packages (from nltk) (8.1.3)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.9/dist-packages (from nltk) (1.1.1)\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: gensim in /usr/local/lib/python3.9/dist-packages (4.3.1)\n",
            "Requirement already satisfied: scipy>=1.7.0 in /usr/local/lib/python3.9/dist-packages (from gensim) (1.10.1)\n",
            "Requirement already satisfied: numpy>=1.18.5 in /usr/local/lib/python3.9/dist-packages (from gensim) (1.22.4)\n",
            "Requirement already satisfied: smart-open>=1.8.1 in /usr/local/lib/python3.9/dist-packages (from gensim) (6.3.0)\n"
          ]
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import html \n",
        "import re\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.ensemble import AdaBoostClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.svm import LinearSVC\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import ConfusionMatrixDisplay\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.dummy import DummyClassifier\n",
        "\n",
        "!pip install nltk\n",
        "!pip install gensim"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DFZIf8aJtna8"
      },
      "outputs": [],
      "source": [
        "# suppress warnings\n",
        "import warnings;\n",
        "warnings.filterwarnings('ignore');\n",
        "\n",
        "# common imports\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import math\n",
        "import re\n",
        "import glob\n",
        "import os\n",
        "import sys\n",
        "import json\n",
        "import random\n",
        "import pprint as pp\n",
        "import textwrap\n",
        "import sqlite3\n",
        "import logging\n",
        "\n",
        "import spacy\n",
        "import nltk\n",
        "\n",
        "from tqdm.auto import tqdm\n",
        "# register `pandas.progress_apply` and `pandas.Series.map_apply` with `tqdm`\n",
        "tqdm.pandas()\n",
        "\n",
        "# pandas display options\n",
        "# https://pandas.pydata.org/pandas-docs/stable/user_guide/options.html#available-options\n",
        "pd.options.display.max_columns = 30 # default 20\n",
        "pd.options.display.max_rows = 60 # default 60\n",
        "pd.options.display.float_format = '{:.2f}'.format\n",
        "# pd.options.display.precision = 2\n",
        "pd.options.display.max_colwidth = 200 # default 50; -1 = all\n",
        "# otherwise text between $ signs will be interpreted as formula and printed in italic\n",
        "pd.set_option('display.html.use_mathjax', False)\n",
        "\n",
        "# np.set_printoptions(edgeitems=3) # default 3\n",
        "\n",
        "import matplotlib\n",
        "from matplotlib import pyplot as plt\n",
        "\n",
        "plot_params = {'figure.figsize': (8, 4), \n",
        "               'axes.labelsize': 'large',\n",
        "               'axes.titlesize': 'large',\n",
        "               'xtick.labelsize': 'large',\n",
        "               'ytick.labelsize':'large',\n",
        "               'figure.dpi': 100}\n",
        "# adjust matplotlib defaults\n",
        "matplotlib.rcParams.update(plot_params)\n",
        "\n",
        "import seaborn as sns\n",
        "sns.set_style(\"darkgrid\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eeZfdHpwM5kW"
      },
      "outputs": [],
      "source": [
        "# Cleaning up the data to remove special characters - will re-use the blueprint from Chapter 5\n",
        "import html \n",
        "import re\n",
        "# tags like \n",
        "RE_TAG = re.compile(r'<[^<>]*>')\n",
        "# text or code in brackets like [0]\n",
        "RE_BRACKET = re.compile('\\[[^\\[\\]]*\\]')\n",
        "# text or code in brackets like (0)\n",
        "RE_BRACKET_1 = re.compile('\\([^)]*\\)')\n",
        "# specials that are not part of words; matches # but not #cool\n",
        "RE_SPECIAL = re.compile(r'(?:^|\\s)[&#<>{}\\[\\]+]+(?:\\s|$)')\n",
        "# standalone sequences of hyphens like --- or ==\n",
        "RE_HYPHEN_SEQ = re.compile(r'(?:^|\\s)[\\-=\\+]{2,}(?:\\s|$)')\n",
        "# sequences of white spaces\n",
        "RE_MULTI_SPACE = re.compile('\\s+')\n",
        "\n",
        "def clean(text):\n",
        "    text = html.unescape(text)\n",
        "    text = RE_TAG.sub(' ', text)\n",
        "    text = RE_BRACKET.sub(' ', text)\n",
        "    text = RE_BRACKET_1.sub(' ', text)\n",
        "    text = RE_SPECIAL.sub(' ', text)\n",
        "    text = RE_HYPHEN_SEQ.sub(' ', text)\n",
        "    text = RE_MULTI_SPACE.sub(' ', text)\n",
        "    return text.strip()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gZhlEeiRtw44"
      },
      "outputs": [],
      "source": [
        "BASE_DIR = '/content/drive/Shareddrives/NLP Project'\n",
        "os.chdir(BASE_DIR)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q4kWNEp0vnlm"
      },
      "source": [
        "# Load dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MMvqwdqzvsrx"
      },
      "outputs": [],
      "source": [
        "# Loading the dataframe\n",
        "file = \"/content/drive/Shareddrives/NLP Project/eclipse_jdt.csv.gz\"\n",
        "raw_df = pd.read_csv(file)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 772
        },
        "id": "V3Sel49Tv37D",
        "outputId": "b73ec12e-8a30-4731-b56d-d748dc961789"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 45296 entries, 0 to 45295\n",
            "Data columns (total 11 columns):\n",
            " #   Column            Non-Null Count  Dtype  \n",
            "---  ------            --------------  -----  \n",
            " 0   Issue_id          45296 non-null  int64  \n",
            " 1   Priority          45296 non-null  object \n",
            " 2   Component         45296 non-null  object \n",
            " 3   Duplicated_issue  7688 non-null   float64\n",
            " 4   Title             45296 non-null  object \n",
            " 5   Description       45253 non-null  object \n",
            " 6   Status            45296 non-null  object \n",
            " 7   Resolution        45296 non-null  object \n",
            " 8   Version           45296 non-null  object \n",
            " 9   Created_time      45296 non-null  object \n",
            " 10  Resolved_time     45296 non-null  object \n",
            "dtypes: float64(1), int64(1), object(9)\n",
            "memory usage: 3.8+ MB\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Issue_id Priority Component  Duplicated_issue  \\\n",
              "0      1518       P1     Debug               NaN   \n",
              "1      1519       P3     Debug               NaN   \n",
              "2      1520       P3     Debug               NaN   \n",
              "\n",
              "                                   Title  \\\n",
              "0     Icons needed for actions (1GI5UXW)   \n",
              "1  README: Hit count not reset (1GET20Y)   \n",
              "2   Use styled text in console (1G9S1YF)   \n",
              "\n",
              "                                                                                                                                                                                               Description  \\\n",
              "0  JGS (8/8/01 5:20:19 PM); \\tWe need enabled; disabled & hover icons for the following actions:; \\t\\tCopyToClipboardActionDelegate; \\t\\tRelaunchActionDelegate; \\t\\tTerminateAndRemoveActionDelegate; ...   \n",
              "1  JGS (6/4/01 11:43:47 AM); \\tSet a breakpoint in InfiniteLoop with a hit count.  When suspended;; \\tright click breakpoint in Breakpoints viewer and enable.  Hit count; \\tstays at previous value.  ...   \n",
              "2                                         DW (2/26/01 5:56:36 PM); \\tCould allow users to use styled text in console; with preference support. This would; \\tallow console input to be shown in bold; etc.   \n",
              "\n",
              "     Status  Resolution Version               Created_time  \\\n",
              "0  VERIFIED       FIXED     2.0  2001-10-10 22:14:00 -0400   \n",
              "1  RESOLVED  WORKSFORME     2.0  2001-10-10 22:14:00 -0400   \n",
              "2    CLOSED     WONTFIX     2.0  2001-10-10 22:14:00 -0400   \n",
              "\n",
              "               Resolved_time  \n",
              "0  2001-10-18 11:51:14 -0400  \n",
              "1  2001-11-28 13:42:46 -0500  \n",
              "2  2002-06-26 11:32:05 -0400  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8ac8c8f6-855b-406c-824d-1668ccae7d88\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe tex2jax_ignore\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Issue_id</th>\n",
              "      <th>Priority</th>\n",
              "      <th>Component</th>\n",
              "      <th>Duplicated_issue</th>\n",
              "      <th>Title</th>\n",
              "      <th>Description</th>\n",
              "      <th>Status</th>\n",
              "      <th>Resolution</th>\n",
              "      <th>Version</th>\n",
              "      <th>Created_time</th>\n",
              "      <th>Resolved_time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1518</td>\n",
              "      <td>P1</td>\n",
              "      <td>Debug</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Icons needed for actions (1GI5UXW)</td>\n",
              "      <td>JGS (8/8/01 5:20:19 PM); \\tWe need enabled; disabled &amp; hover icons for the following actions:; \\t\\tCopyToClipboardActionDelegate; \\t\\tRelaunchActionDelegate; \\t\\tTerminateAndRemoveActionDelegate; ...</td>\n",
              "      <td>VERIFIED</td>\n",
              "      <td>FIXED</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2001-10-10 22:14:00 -0400</td>\n",
              "      <td>2001-10-18 11:51:14 -0400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1519</td>\n",
              "      <td>P3</td>\n",
              "      <td>Debug</td>\n",
              "      <td>NaN</td>\n",
              "      <td>README: Hit count not reset (1GET20Y)</td>\n",
              "      <td>JGS (6/4/01 11:43:47 AM); \\tSet a breakpoint in InfiniteLoop with a hit count.  When suspended;; \\tright click breakpoint in Breakpoints viewer and enable.  Hit count; \\tstays at previous value.  ...</td>\n",
              "      <td>RESOLVED</td>\n",
              "      <td>WORKSFORME</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2001-10-10 22:14:00 -0400</td>\n",
              "      <td>2001-11-28 13:42:46 -0500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1520</td>\n",
              "      <td>P3</td>\n",
              "      <td>Debug</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Use styled text in console (1G9S1YF)</td>\n",
              "      <td>DW (2/26/01 5:56:36 PM); \\tCould allow users to use styled text in console; with preference support. This would; \\tallow console input to be shown in bold; etc.</td>\n",
              "      <td>CLOSED</td>\n",
              "      <td>WONTFIX</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2001-10-10 22:14:00 -0400</td>\n",
              "      <td>2002-06-26 11:32:05 -0400</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8ac8c8f6-855b-406c-824d-1668ccae7d88')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8ac8c8f6-855b-406c-824d-1668ccae7d88 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8ac8c8f6-855b-406c-824d-1668ccae7d88');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "raw_df.info()\n",
        "raw_df.head(3)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J4zoaAaMyOW7"
      },
      "source": [
        "# Step 1\n",
        "Clean and prepare the dataset then recode the outcome into a binary variable and split into training and testing sets"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uTzCA1IkNh2O"
      },
      "source": [
        "Preparing and cleaning the dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0PKeYtb5yP8S"
      },
      "outputs": [],
      "source": [
        "# create a new column 'target_priority' with 1 for P3 and 0 for others\n",
        "raw_df['Target_priority'] = raw_df['Priority'].apply(lambda x: 1 if x == 'P3' else 0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1XOAOIMpD8Lh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 790
        },
        "outputId": "1ab09f2a-bb3a-4d12-8fc0-dc9c0ab7fcf7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 45296 entries, 0 to 45295\n",
            "Data columns (total 12 columns):\n",
            " #   Column            Non-Null Count  Dtype  \n",
            "---  ------            --------------  -----  \n",
            " 0   Issue_id          45296 non-null  int64  \n",
            " 1   Priority          45296 non-null  object \n",
            " 2   Component         45296 non-null  object \n",
            " 3   Duplicated_issue  7688 non-null   float64\n",
            " 4   Title             45296 non-null  object \n",
            " 5   Description       45253 non-null  object \n",
            " 6   Status            45296 non-null  object \n",
            " 7   Resolution        45296 non-null  object \n",
            " 8   Version           45296 non-null  object \n",
            " 9   Created_time      45296 non-null  object \n",
            " 10  Resolved_time     45296 non-null  object \n",
            " 11  Target_priority   45296 non-null  int64  \n",
            "dtypes: float64(1), int64(2), object(9)\n",
            "memory usage: 4.1+ MB\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Issue_id Priority Component  Duplicated_issue  \\\n",
              "0      1518       P1     Debug               NaN   \n",
              "1      1519       P3     Debug               NaN   \n",
              "2      1520       P3     Debug               NaN   \n",
              "\n",
              "                                   Title  \\\n",
              "0     Icons needed for actions (1GI5UXW)   \n",
              "1  README: Hit count not reset (1GET20Y)   \n",
              "2   Use styled text in console (1G9S1YF)   \n",
              "\n",
              "                                                                                                                                                                                               Description  \\\n",
              "0  JGS (8/8/01 5:20:19 PM); \\tWe need enabled; disabled & hover icons for the following actions:; \\t\\tCopyToClipboardActionDelegate; \\t\\tRelaunchActionDelegate; \\t\\tTerminateAndRemoveActionDelegate; ...   \n",
              "1  JGS (6/4/01 11:43:47 AM); \\tSet a breakpoint in InfiniteLoop with a hit count.  When suspended;; \\tright click breakpoint in Breakpoints viewer and enable.  Hit count; \\tstays at previous value.  ...   \n",
              "2                                         DW (2/26/01 5:56:36 PM); \\tCould allow users to use styled text in console; with preference support. This would; \\tallow console input to be shown in bold; etc.   \n",
              "\n",
              "     Status  Resolution Version               Created_time  \\\n",
              "0  VERIFIED       FIXED     2.0  2001-10-10 22:14:00 -0400   \n",
              "1  RESOLVED  WORKSFORME     2.0  2001-10-10 22:14:00 -0400   \n",
              "2    CLOSED     WONTFIX     2.0  2001-10-10 22:14:00 -0400   \n",
              "\n",
              "               Resolved_time  Target_priority  \n",
              "0  2001-10-18 11:51:14 -0400                0  \n",
              "1  2001-11-28 13:42:46 -0500                1  \n",
              "2  2002-06-26 11:32:05 -0400                1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cbbad8ef-8747-4aad-8cbd-4b361ca8b1e6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe tex2jax_ignore\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Issue_id</th>\n",
              "      <th>Priority</th>\n",
              "      <th>Component</th>\n",
              "      <th>Duplicated_issue</th>\n",
              "      <th>Title</th>\n",
              "      <th>Description</th>\n",
              "      <th>Status</th>\n",
              "      <th>Resolution</th>\n",
              "      <th>Version</th>\n",
              "      <th>Created_time</th>\n",
              "      <th>Resolved_time</th>\n",
              "      <th>Target_priority</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1518</td>\n",
              "      <td>P1</td>\n",
              "      <td>Debug</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Icons needed for actions (1GI5UXW)</td>\n",
              "      <td>JGS (8/8/01 5:20:19 PM); \\tWe need enabled; disabled &amp; hover icons for the following actions:; \\t\\tCopyToClipboardActionDelegate; \\t\\tRelaunchActionDelegate; \\t\\tTerminateAndRemoveActionDelegate; ...</td>\n",
              "      <td>VERIFIED</td>\n",
              "      <td>FIXED</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2001-10-10 22:14:00 -0400</td>\n",
              "      <td>2001-10-18 11:51:14 -0400</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1519</td>\n",
              "      <td>P3</td>\n",
              "      <td>Debug</td>\n",
              "      <td>NaN</td>\n",
              "      <td>README: Hit count not reset (1GET20Y)</td>\n",
              "      <td>JGS (6/4/01 11:43:47 AM); \\tSet a breakpoint in InfiniteLoop with a hit count.  When suspended;; \\tright click breakpoint in Breakpoints viewer and enable.  Hit count; \\tstays at previous value.  ...</td>\n",
              "      <td>RESOLVED</td>\n",
              "      <td>WORKSFORME</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2001-10-10 22:14:00 -0400</td>\n",
              "      <td>2001-11-28 13:42:46 -0500</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1520</td>\n",
              "      <td>P3</td>\n",
              "      <td>Debug</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Use styled text in console (1G9S1YF)</td>\n",
              "      <td>DW (2/26/01 5:56:36 PM); \\tCould allow users to use styled text in console; with preference support. This would; \\tallow console input to be shown in bold; etc.</td>\n",
              "      <td>CLOSED</td>\n",
              "      <td>WONTFIX</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2001-10-10 22:14:00 -0400</td>\n",
              "      <td>2002-06-26 11:32:05 -0400</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cbbad8ef-8747-4aad-8cbd-4b361ca8b1e6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-cbbad8ef-8747-4aad-8cbd-4b361ca8b1e6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-cbbad8ef-8747-4aad-8cbd-4b361ca8b1e6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "raw_df.info()\n",
        "raw_df.head(3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 596
        },
        "id": "qytUtCPVEa4g",
        "outputId": "de84bf95-03d8-469c-fa8e-d4353be200ab"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 45253 entries, 0 to 45295\n",
            "Data columns (total 2 columns):\n",
            " #   Column           Non-Null Count  Dtype \n",
            "---  ------           --------------  ----- \n",
            " 0   Target_priority  45253 non-null  int64 \n",
            " 1   Text             45253 non-null  object\n",
            "dtypes: int64(1), object(1)\n",
            "memory usage: 1.0+ MB\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 45253 entries, 0 to 45295\n",
            "Data columns (total 2 columns):\n",
            " #   Column           Non-Null Count  Dtype \n",
            "---  ------           --------------  ----- \n",
            " 0   Target_priority  45253 non-null  int64 \n",
            " 1   Text             45253 non-null  object\n",
            "dtypes: int64(1), object(1)\n",
            "memory usage: 1.0+ MB\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Target_priority  \\\n",
              "0                0   \n",
              "1                1   \n",
              "2                1   \n",
              "\n",
              "                                                                                                                                                                                                      Text  \n",
              "0  Icons needed for actions (1GI5UXW) JGS (8/8/01 5:20:19 PM); \\tWe need enabled; disabled & hover icons for the following actions:; \\t\\tCopyToClipboardActionDelegate; \\t\\tRelaunchActionDelegate; \\t\\...  \n",
              "1  README: Hit count not reset (1GET20Y) JGS (6/4/01 11:43:47 AM); \\tSet a breakpoint in InfiniteLoop with a hit count.  When suspended;; \\tright click breakpoint in Breakpoints viewer and enable.  H...  \n",
              "2    Use styled text in console (1G9S1YF) DW (2/26/01 5:56:36 PM); \\tCould allow users to use styled text in console; with preference support. This would; \\tallow console input to be shown in bold; etc.  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-77c8ca08-8825-4855-99d0-f259e7bb3e5e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe tex2jax_ignore\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Target_priority</th>\n",
              "      <th>Text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Icons needed for actions (1GI5UXW) JGS (8/8/01 5:20:19 PM); \\tWe need enabled; disabled &amp; hover icons for the following actions:; \\t\\tCopyToClipboardActionDelegate; \\t\\tRelaunchActionDelegate; \\t\\...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>README: Hit count not reset (1GET20Y) JGS (6/4/01 11:43:47 AM); \\tSet a breakpoint in InfiniteLoop with a hit count.  When suspended;; \\tright click breakpoint in Breakpoints viewer and enable.  H...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>Use styled text in console (1G9S1YF) DW (2/26/01 5:56:36 PM); \\tCould allow users to use styled text in console; with preference support. This would; \\tallow console input to be shown in bold; etc.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-77c8ca08-8825-4855-99d0-f259e7bb3e5e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-77c8ca08-8825-4855-99d0-f259e7bb3e5e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-77c8ca08-8825-4855-99d0-f259e7bb3e5e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "df = raw_df[['Title', 'Description', 'Target_priority']]\n",
        "df = df.dropna()\n",
        "df['Text'] = df['Title'] + ' ' + df['Description']\n",
        "df = df.drop(columns=['Title', 'Description'])\n",
        "df.info()\n",
        "df.info()\n",
        "df.head(3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 539
        },
        "id": "64k-8MVpFzxp",
        "outputId": "ea7122a2-583e-431a-a0e7-091e16c6b2c1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 45253 entries, 0 to 45295\n",
            "Data columns (total 2 columns):\n",
            " #   Column           Non-Null Count  Dtype \n",
            "---  ------           --------------  ----- \n",
            " 0   Target_priority  45253 non-null  int64 \n",
            " 1   Text             45253 non-null  object\n",
            "dtypes: int64(1), object(1)\n",
            "memory usage: 1.0+ MB\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Target_priority  \\\n",
              "0  0                 \n",
              "1  1                 \n",
              "2  1                 \n",
              "\n",
ext  \n",
              "0  Icons needed for actions (1GI5UXW) JGS (8/8/01 5:20:19 PM); \\tWe need enabled; disabled & hover icons for the following actions:; \\t\\tCopyToClipboardActionDelegate; \\t\\tRelaunchActionDelegate; \\t\\tTerminateAndRemoveActionDelegate; ; DW (9/24/2001 2:22:48 PM); \\tUse the standard copy icon for copy to clipboard (desktop likely exposes it).; ; DW (9/24/2001 2:23:05 PM); \\tMade requests for; \\t\\tRelaunch; \\t\\tTerminate All; \\t\\tTerminate & Remove                                                                                                                                                                                \n",
              "1  README: Hit count not reset (1GET20Y) JGS (6/4/01 11:43:47 AM); \\tSet a breakpoint in InfiniteLoop with a hit count.  When suspended;; \\tright click breakpoint in Breakpoints viewer and enable.  Hit count; \\tstays at previous value.  Should it be reset to zero?; ; DW (6/4/01 11:50:23 AM); \\tThis should just re-enable the breakpoint with the previous hit-count.; ; DS (6/4/2001 11:50:31 AM); \\tTo change a hit count breakpoint into a normal breakpoint; you set its hit count to zero.; \\tThis should likely be a readme item.; ; DW (6/4/01 6:33:43 PM); \\tMake into a README.; ; DW (6/15/01 9:45:55 AM); \\tAdded to README.  \n",
              "2  Use styled text in console (1G9S1YF) DW (2/26/01 5:56:36 PM); \\tCould allow users to use styled text in console; with preference support. This would; \\tallow console input to be shown in bold; etc.                                                                                                                                                                                                                                                                                                                                                                                                                                         "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cbf8ef39-5a52-450f-839a-041cc60c81f8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe tex2jax_ignore\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Target_priority</th>\n",
              "      <th>Text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Icons needed for actions (1GI5UXW) JGS (8/8/01 5:20:19 PM); \\tWe need enabled; disabled &amp; hover icons for the following actions:; \\t\\tCopyToClipboardActionDelegate; \\t\\tRelaunchActionDelegate; \\t\\tTerminateAndRemoveActionDelegate; ; DW (9/24/2001 2:22:48 PM); \\tUse the standard copy icon for copy to clipboard (desktop likely exposes it).; ; DW (9/24/2001 2:23:05 PM); \\tMade requests for; \\t\\tRelaunch; \\t\\tTerminate All; \\t\\tTerminate &amp; Remove</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>README: Hit count not reset (1GET20Y) JGS (6/4/01 11:43:47 AM); \\tSet a breakpoint in InfiniteLoop with a hit count.  When suspended;; \\tright click breakpoint in Breakpoints viewer and enable.  Hit count; \\tstays at previous value.  Should it be reset to zero?; ; DW (6/4/01 11:50:23 AM); \\tThis should just re-enable the breakpoint with the previous hit-count.; ; DS (6/4/2001 11:50:31 AM); \\tTo change a hit count breakpoint into a normal breakpoint; you set its hit count to zero.; \\tThis should likely be a readme item.; ; DW (6/4/01 6:33:43 PM); \\tMake into a README.; ; DW (6/15/01 9:45:55 AM); \\tAdded to README.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>Use styled text in console (1G9S1YF) DW (2/26/01 5:56:36 PM); \\tCould allow users to use styled text in console; with preference support. This would; \\tallow console input to be shown in bold; etc.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cbf8ef39-5a52-450f-839a-041cc60c81f8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-cbf8ef39-5a52-450f-839a-041cc60c81f8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-cbf8ef39-5a52-450f-839a-041cc60c81f8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "import warnings\n",
        "warnings.simplefilter(\"ignore\")\n",
        "pd.set_option('display.max_colwidth', -1)\n",
        "df.info()\n",
        "df.head(3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 504
        },
        "id": "z3ExF1vVGTN_",
        "outputId": "cae8ec5b-8929-4ad4-e067-b071283fd143"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 45044 entries, 0 to 45295\n",
            "Data columns (total 2 columns):\n",
            " #   Column           Non-Null Count  Dtype \n",
            "---  ------           --------------  ----- \n",
            " 0   Target_priority  45044 non-null  int64 \n",
            " 1   Text             45044 non-null  object\n",
            "dtypes: int64(1), object(1)\n",
            "memory usage: 1.0+ MB\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Target_priority  \\\n",
              "0  0                 \n",
              "1  1                 \n",
              "2  1                 \n",
              "\n",
ext  \n",
              "0  Icons needed for actions JGS ; We need enabled; disabled hover icons for the following actions:; CopyToClipboardActionDelegate; RelaunchActionDelegate; TerminateAndRemoveActionDelegate; ; DW ; Use the standard copy icon for copy to clipboard .; ; DW ; Made requests for; Relaunch; Terminate All; Terminate Remove                                                                                                                                                                                    \n",
              "1  README: Hit count not reset JGS ; Set a breakpoint in InfiniteLoop with a hit count. When suspended;; right click breakpoint in Breakpoints viewer and enable. Hit count; stays at previous value. Should it be reset to zero?; ; DW ; This should just re-enable the breakpoint with the previous hit-count.; ; DS ; To change a hit count breakpoint into a normal breakpoint; you set its hit count to zero.; This should likely be a readme item.; ; DW ; Make into a README.; ; DW ; Added to README.  \n",
              "2  Use styled text in console DW ; Could allow users to use styled text in console; with preference support. This would; allow console input to be shown in bold; etc.                                                                                                                                                                                                                                                                                                                                         "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f10dfe5f-1928-4c6c-bab1-dedb623a518e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe tex2jax_ignore\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Target_priority</th>\n",
              "      <th>Text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Icons needed for actions JGS ; We need enabled; disabled hover icons for the following actions:; CopyToClipboardActionDelegate; RelaunchActionDelegate; TerminateAndRemoveActionDelegate; ; DW ; Use the standard copy icon for copy to clipboard .; ; DW ; Made requests for; Relaunch; Terminate All; Terminate Remove</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>README: Hit count not reset JGS ; Set a breakpoint in InfiniteLoop with a hit count. When suspended;; right click breakpoint in Breakpoints viewer and enable. Hit count; stays at previous value. Should it be reset to zero?; ; DW ; This should just re-enable the breakpoint with the previous hit-count.; ; DS ; To change a hit count breakpoint into a normal breakpoint; you set its hit count to zero.; This should likely be a readme item.; ; DW ; Make into a README.; ; DW ; Added to README.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>Use styled text in console DW ; Could allow users to use styled text in console; with preference support. This would; allow console input to be shown in bold; etc.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f10dfe5f-1928-4c6c-bab1-dedb623a518e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f10dfe5f-1928-4c6c-bab1-dedb623a518e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f10dfe5f-1928-4c6c-bab1-dedb623a518e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "df['Text'] = df['Text'].apply(clean)\n",
        "df = df[df['Text'].str.len() > 50]\n",
        "df.info()\n",
        "df.head(3)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "klozLQKdNeEP"
      },
      "source": [
        "Splitting and training the model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ht3cb8dhzpSt",
        "outputId": "95842b71-822c-4a0a-ffac-d79257b95ebd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Size of Training Data  36035\n",
            "Size of Test Data  9009\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "\n",
        "# split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(df['Text'], df['Target_priority'], test_size=0.2, random_state=42, stratify = df['Target_priority'])\n",
        "\n",
        "print('Size of Training Data ', X_train.shape[0])\n",
        "print('Size of Test Data ', X_test.shape[0])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KRi4uOZG2AvE"
      },
      "source": [
        "# Step 2\n",
        "Vectorization using TFIDF"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Sjf0cy_a2FTP"
      },
      "outputs": [],
      "source": [
        "tfidf = TfidfVectorizer(min_df = 10, ngram_range=(1,2), stop_words=\"english\")\n",
        "X_train_tf = tfidf.fit_transform(X_train)\n",
        "X_test_tf = tfidf.transform(X_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RTfKW5MWc71v"
      },
      "source": [
        "# Step 3\n",
        "Build reference results and training the models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ognrsMYb9_OD",
        "outputId": "439194a0-6ff1-4a08-af1e-5447f3f5b5af"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "               Classifier  Accuracy  F1-Score  Cohen’s Kappa  ROC AUC  PRC AUC\n",
            "0  Logistic Regression    0.88      0.93      0.05           0.73     0.95    \n",
            "1  Random Forest          0.88      0.93      0.06           0.70     0.94    \n",
            "2  Naive Bayes            0.88      0.93      0.01           0.70     0.94    \n",
            "3  Support Vector Machine 0.87      0.93      0.14           0.69     0.93    \n",
            "4  K-Nearest Neighbors    0.86      0.93      0.07           0.61     0.90    \n",
            "5  Trivial Classifier     0.88      0.93      0.00           0.50     0.88    \n"
          ]
        }
      ],
      "source": [
        "# Import necessary packages\n",
        "from sklearn.dummy import DummyClassifier\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.metrics import accuracy_score, f1_score, cohen_kappa_score, roc_auc_score, average_precision_score\n",
        "from sklearn.svm import LinearSVC\n",
        "\n",
        "# Define classifiers\n",
        "classifiers = {'Logistic Regression': LogisticRegression(),\n",
        "               'Random Forest': RandomForestClassifier(),\n",
        "               'Naive Bayes': MultinomialNB(),\n",
        "               'Support Vector Machine': LinearSVC(),\n",
        "               'K-Nearest Neighbors': KNeighborsClassifier(),\n",
        "               'Trivial Classifier': DummyClassifier(strategy='most_frequent')}\n",
        "\n",
        "# Create empty DataFrame\n",
        "results = pd.DataFrame(columns=['Classifier', 'Accuracy', 'F1-Score', 'Cohen’s Kappa', 'ROC AUC', 'PRC AUC'])\n",
        "\n",
        "# Evaluate each classifier and store the results in the DataFrame\n",
        "for clf_name, clf in classifiers.items():\n",
        "    clf.fit(X_train_tf, y_train)\n",
        "    y_pred = clf.predict(X_test_tf)\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    f1 = f1_score(y_test, y_pred)\n",
        "    cohen_kappa = cohen_kappa_score(y_test, y_pred)\n",
        "    if hasattr(clf, 'predict_proba'):\n",
        "        # For classifiers with a predict_proba method, use it to get decision scores\n",
        "        roc_auc = roc_auc_score(y_test, clf.predict_proba(X_test_tf)[:, 1])\n",
        "        prc_auc = average_precision_score(y_test, clf.predict_proba(X_test_tf)[:, 1])\n",
        "    elif hasattr(clf, 'decision_function'):\n",
        "        # For classifiers with a decision_function method, use it to get decision scores\n",
        "        roc_auc = roc_auc_score(y_test, clf.decision_function(X_test_tf))\n",
        "        prc_auc = average_precision_score(y_test, clf.decision_function(X_test_tf))\n",
        "    else:\n",
        "        # For classifiers without a predict_proba or decision_function method, skip ROC AUC and PRC AUC\n",
        "        roc_auc = None\n",
        "        prc_auc = None\n",
        "    \n",
        "    results = results.append({'Classifier': clf_name, \n",
        "                              'Accuracy': accuracy, \n",
        "                              'F1-Score': f1, \n",
        "                              'Cohen’s Kappa': cohen_kappa, \n",
        "                              'ROC AUC': roc_auc, \n",
        "                              'PRC AUC': prc_auc}, ignore_index=True)\n",
        "\n",
        "# Print the results DataFrame\n",
        "print(results)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "96HIKlq6aFCN"
      },
      "source": [
        "# Step 4\n",
        "Undersampling the majority class"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bfcLubUFeXye"
      },
      "outputs": [],
      "source": [
        "value_counts = df['Target_priority'].value_counts()\n",
        "\n",
        "# calculate the number of rows we need to undersample from P3\n",
        "undersample_size = value_counts[1] - value_counts[0]\n",
        "\n",
        "# undersample P3 by randomly selecting rows without replacement\n",
        "undersampled_df = df[df['Target_priority'] == 1].sample(n=undersample_size, replace=False, random_state=42)\n",
        "\n",
        "# concatenate the undersampled P3 dataframe with the P-Other dataframe\n",
        "df_under = pd.concat([undersampled_df, df[df['Target_priority'] == 0]], axis=0)\n",
        "\n",
        "# shuffle the rows of the new dataframe\n",
        "df_under = df_under.sample(frac=1, random_state=42)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 500
        },
        "id": "NCttrXZPqWxp",
        "outputId": "3f57575c-060f-4729-ec69-3f5cad5a3265"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-eab5ff2d-1f1f-4f9d-ad0a-215485d56a95\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe tex2jax_ignore\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Target_priority</th>\n",
              "      <th>Text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2002</th>\n",
              "      <td>1</td>\n",
              "      <td>Mouse click on error markers should respond When the user clicks on an error marker in the editor; we should immediately; bring up the pop-up with the error message. ; ; The current behavior is extremely; painful. Its difficult to get the mouse in just the right position at just the; right speed to bring up the message.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2399</th>\n",
              "      <td>1</td>\n",
              "      <td>Cant Self Encapsulate a field which is a base type. Stable Build: 20011206; ; pulic class Test{; private int id;; }; ; Trying to run Self Encapsulate Field from Refactor menu results in error ; message of Self Encapsulate Field is not applicable to base types.; ; I cant think of a reason why this encapsulating base types isnt allowed but ; it should certainly be available.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2898</th>\n",
              "      <td>0</td>\n",
              "      <td>VMDisconnectedException on shutdown Log: Mon Jan 21 17:15:22 CST 2002; 4 org.eclipse.jdt.debug 120 Internal error logged from JDI Debug: ; com.sun.jdi.VMDisconnectedException: Got IOException from Virtual Machine; at org.eclipse.jdi.internal.connect.PacketSendManager.sendPacket; ; at org.eclipse.jdi.internal.MirrorImpl.requestVM ; at org.eclipse.jdi.internal.MirrorImpl.requestVM ; at org.eclipse.jdi.internal.request.EventRequestImpl.disable; ; at ; org.eclipse.jdi.internal.request.EventRequestManagerImpl.deleteEventRequest; ; at ; org.eclipse.jdt.internal.debug.core.breakpoints.JavaBreakpoint.removeFromTarget; ; at ; org.eclipse.jdt.internal.debug.core.model.JDIDebugTarget.removeAllBreakpoints; ; at org.eclipse.jdt.internal.debug.core.model.JDIDebugTarget.cleanup; ; at org.eclipse.jdt.internal.debug.core.model.JDIDebugTarget.shutdown; ; at org.eclipse.jdt.internal.debug.core.JDIDebugPlugin.shutdown; ; at org.eclipse.core.internal.plugins.PluginRegistry$2.run; ; at org.eclipse.core.internal.runtime.InternalPlatform.run; ; at org.eclipse.core.internal.plugins.PluginRegistry$1.visit; ; at org.eclipse.core.internal.plugins.PluginRegistry.accept; ; at org.eclipse.core.internal.plugins.PluginRegistry.shutdownPlugins; ; at org.eclipse.core.internal.plugins.PluginRegistry.shutdown; ; at org.eclipse.core.internal.runtime.InternalPlatform.loaderShutdown; ; at java.lang.reflect.Method.invoke ; at org.eclipse.core.internal.boot.InternalBootLoader.shutdown; ; at org.eclipse.core.internal.boot.InternalBootLoader.run; ; at org.eclipse.core.boot.BootLoader.run ; at SlimLauncher.main</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eab5ff2d-1f1f-4f9d-ad0a-215485d56a95')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-eab5ff2d-1f1f-4f9d-ad0a-215485d56a95 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-eab5ff2d-1f1f-4f9d-ad0a-215485d56a95');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "      Target_priority  \\\n",
              "2002  1                 \n",
              "2399  1                 \n",
              "2898  0                 \n",
              "\n",
ext  \n",
              "2002  Mouse click on error markers should respond When the user clicks on an error marker in the editor; we should immediately; bring up the pop-up with the error message. ; ; The current behavior is extremely; painful. Its difficult to get the mouse in just the right position at just the; right speed to bring up the messagen",
              "2399  Cant Self Encapsulate a field which is a base type. Stable Build: 20011206; ; pulic class Test{; private int id;; }; ; Trying to run Self Encapsulate Field from Refactor menu results in error ; message of Self Encapsulate Field is not applicable to base types.; ; I cant think of a reason why this encapsulating base types isnt allowed but ; it should certainly be availablen",
              "2898  VMDisconnectedException on shutdown Log: Mon Jan 21 17:15:22 CST 2002; 4 org.eclipse.jdt.debug 120 Internal error logged from JDI Debug: ; com.sun.jdi.VMDisconnectedException: Got IOException from Virtual Machine; at org.eclipse.jdi.internal.connect.PacketSendManager.sendPacket; ; at org.eclipse.jdi.internal.MirrorImpl.requestVM ; at org.eclipse.jdi.internal.MirrorImpl.requestVM ; at org.eclipse.jdi.internal.request.EventRequestImpl.disable; ; at ; org.eclipse.jdi.internal.request.EventRequestManagerImpl.deleteEventRequest; ; at ; org.eclipse.jdt.internal.debug.core.breakpoints.JavaBreakpoint.removeFromTarget; ; at ; org.eclipse.jdt.internal.debug.core.model.JDIDebugTarget.removeAllBreakpoints; ; at org.eclipse.jdt.internal.debug.core.model.JDIDebugTarget.cleanup; ; at org.eclipse.jdt.internal.debug.core.model.JDIDebugTarget.shutdown; ; at org.eclipse.jdt.internal.debug.core.JDIDebugPlugin.shutdown; ; at org.eclipse.core.internal.plugins.PluginRegistry$2.run; ; at org.eclipse.core.internal.runtime.InternalPlatform.run; ; at org.eclipse.core.internal.plugins.PluginRegistry$1.visit; ; at org.eclipse.core.internal.plugins.PluginRegistry.accept; ; at org.eclipse.core.internal.plugins.PluginRegistry.shutdownPlugins; ; at org.eclipse.core.internal.plugins.PluginRegistry.shutdown; ; at org.eclipse.core.internal.runtime.InternalPlatform.loaderShutdown; ; at java.lang.reflect.Method.invoke ; at org.eclipse.core.internal.boot.InternalBootLoader.shutdown; ; at org.eclipse.core.internal.boot.InternalBootLoader.run; ; at org.eclipse.core.boot.BootLoader.run ; at SlimLauncher.main  "
            ]
          },
          "execution_count": 28,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_under.head(3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UHLLs-gesQ9D",
        "outputId": "96789721-37df-4c60-ffa6-0bc4b2d0cbc9"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Size of Training Data  31599\n",
            "Size of Test Data  7900\n"
          ]
        }
      ],
      "source": [
        "# split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(df_under['Text'], df_under['Target_priority'], test_size=0.2, random_state=42, stratify = df_under['Target_priority'])\n",
        "\n",
        "print('Size of Training Data ', X_train.shape[0])\n",
        "print('Size of Test Data ', X_test.shape[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "w3l9g1aqskHL"
      },
      "outputs": [],
      "source": [
        "X_train_tf = tfidf.fit_transform(X_train)\n",
        "X_test_tf = tfidf.transform(X_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tSrej-37s4K4",
        "outputId": "9e001241-5231-43c8-c5f8-e28e31c0eda2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "               Classifier  Accuracy  F1-Score  Cohen’s Kappa  ROC AUC  PRC AUC\n",
            "0  Logistic Regression    0.86      0.93      0.08           0.73     0.94    \n",
            "1  Random Forest          0.86      0.93      0.10           0.70     0.93    \n",
            "2  Naive Bayes            0.86      0.92      0.03           0.70     0.93    \n",
            "3  Support Vector Machine 0.85      0.92      0.16           0.69     0.92    \n",
            "4  K-Nearest Neighbors    0.84      0.91      0.08           0.61     0.89    \n",
            "5  Trivial Classifier     0.86      0.92      0.00           0.50     0.86    \n"
          ]
        }
      ],
      "source": [
        "from sklearn.dummy import DummyClassifier\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from xgboost import XGBClassifier\n",
        "\n",
        "# Import necessary packages\n",
        "from sklearn.metrics import accuracy_score, f1_score, cohen_kappa_score, roc_auc_score, average_precision_score\n",
        "from sklearn.svm import LinearSVC\n",
        "\n",
        "# Define classifiers\n",
        "classifiers = {'Logistic Regression': LogisticRegression(),\n",
        "               'Random Forest': RandomForestClassifier(),\n",
        "               'Naive Bayes': MultinomialNB(),\n",
        "               'Support Vector Machine': LinearSVC(),\n",
        "               'K-Nearest Neighbors': KNeighborsClassifier(),\n",
        "               'Trivial Classifier': DummyClassifier(strategy='most_frequent')}\n",
        "\n",
        "# Create empty DataFrame\n",
        "results = pd.DataFrame(columns=['Classifier', 'Accuracy', 'F1-Score', 'Cohen’s Kappa', 'ROC AUC', 'PRC AUC'])\n",
        "\n",
        "# Evaluate each classifier and store the results in the DataFrame\n",
        "for clf_name, clf in classifiers.items():\n",
        "    clf.fit(X_train_tf, y_train)\n",
        "    y_pred = clf.predict(X_test_tf)\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    f1 = f1_score(y_test, y_pred)\n",
        "    cohen_kappa = cohen_kappa_score(y_test, y_pred)\n",
        "    if hasattr(clf, 'predict_proba'):\n",
        "        # For classifiers with a predict_proba method, use it to get decision scores\n",
        "        roc_auc = roc_auc_score(y_test, clf.predict_proba(X_test_tf)[:, 1])\n",
        "        prc_auc = average_precision_score(y_test, clf.predict_proba(X_test_tf)[:, 1])\n",
        "    elif hasattr(clf, 'decision_function'):\n",
        "        # For classifiers with a decision_function method, use it to get decision scores\n",
        "        roc_auc = roc_auc_score(y_test, clf.decision_function(X_test_tf))\n",
        "        prc_auc = average_precision_score(y_test, clf.decision_function(X_test_tf))\n",
        "    else:\n",
        "        # For classifiers without a predict_proba or decision_function method, skip ROC AUC and PRC AUC\n",
        "        roc_auc = None\n",
        "        prc_auc = None\n",
        "    \n",
        "    results = results.append({'Classifier': clf_name, \n",
        "                              'Accuracy': accuracy, \n",
        "                              'F1-Score': f1, \n",
        "                              'Cohen’s Kappa': cohen_kappa, \n",
        "                              'ROC AUC': roc_auc, \n",
        "                              'PRC AUC': prc_auc}, ignore_index=True)\n",
        "\n",
        "# Print the results DataFrame\n",
        "print(results)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nfPJ3TONumPa"
      },
      "source": [
        "# Step 5\n",
        "Oversampling the minority class"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Z2aJGJDEul1a"
      },
      "outputs": [],
      "source": [
        "# count the number of rows with each value in the Target_priority column\n",
        "value_counts = df['Target_priority'].value_counts()\n",
        "\n",
        "# calculate the number of rows we need to oversample for P-Other\n",
        "oversample_size = value_counts[1] - value_counts[0]\n",
        "\n",
        "# oversample P-Other by duplicating its rows\n",
        "oversampled_df = df[df['Target_priority'] == 0].sample(n=oversample_size, replace=True, random_state=42)\n",
        "\n",
        "# concatenate the oversampled P-Other dataframe with the P3 dataframe\n",
        "df_over = pd.concat([df[df['Target_priority'] == 1], oversampled_df], axis=0)\n",
        "\n",
        "# shuffle the rows of the new dataframe\n",
        "df_over = df_over.sample(frac=1, random_state=42)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ho7cdlpovA5m",
        "outputId": "53cb08e9-8ec6-4859-d470-3f829e2fe9d0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Size of Training Data  58762\n",
            "Size of Test Data  14691\n"
          ]
        }
      ],
      "source": [
        "# split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(df_over['Text'], df_over['Target_priority'], test_size=0.2, random_state=42, stratify = df_over['Target_priority'])\n",
        "\n",
        "print('Size of Training Data ', X_train.shape[0])\n",
        "print('Size of Test Data ', X_test.shape[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "__Elv5tnxsQq"
      },
      "outputs": [],
      "source": [
        "X_train_tf = tfidf.fit_transform(X_train)\n",
        "X_test_tf = tfidf.transform(X_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BMhyuJz4xs-G",
        "outputId": "350f0e93-d8ee-4229-852b-85f592d7d154"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "               Classifier  Accuracy  F1-Score  Cohen’s Kappa  ROC AUC  PRC AUC\n",
            "0  Logistic Regression    0.85      0.86      0.69           0.92     0.93    \n",
            "1  Random Forest          0.99      0.99      0.98           1.00     1.00    \n",
            "2  Naive Bayes            0.78      0.81      0.56           0.86     0.88    \n",
            "3  Support Vector Machine 0.92      0.92      0.85           0.97     0.98    \n",
            "4  K-Nearest Neighbors    0.84      0.83      0.67           0.92     0.92    \n",
            "5  Trivial Classifier     0.54      0.70      0.00           0.50     0.54    \n"
          ]
        }
      ],
      "source": [
        "\n",
        "# Import necessary packages\n",
        "from sklearn.metrics import accuracy_score, f1_score, cohen_kappa_score, roc_auc_score, average_precision_score\n",
        "from sklearn.svm import LinearSVC\n",
        "\n",
        "# Define classifiers\n",
        "classifiers = {'Logistic Regression': LogisticRegression(),\n",
        "               'Random Forest': RandomForestClassifier(),\n",
        "               'Naive Bayes': MultinomialNB(),\n",
        "               'Support Vector Machine': LinearSVC(),\n",
        "               'K-Nearest Neighbors': KNeighborsClassifier(),\n",
        "               'Trivial Classifier': DummyClassifier(strategy='most_frequent')}\n",
        "\n",
        "# Create empty DataFrame\n",
        "results = pd.DataFrame(columns=['Classifier', 'Accuracy', 'F1-Score', 'Cohen’s Kappa', 'ROC AUC', 'PRC AUC'])\n",
        "\n",
        "# Evaluate each classifier and store the results in the DataFrame\n",
        "for clf_name, clf in classifiers.items():\n",
        "    clf.fit(X_train_tf, y_train)\n",
        "    y_pred = clf.predict(X_test_tf)\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    f1 = f1_score(y_test, y_pred)\n",
        "    cohen_kappa = cohen_kappa_score(y_test, y_pred)\n",
        "    if hasattr(clf, 'predict_proba'):\n",
        "        # For classifiers with a predict_proba method, use it to get decision scores\n",
        "        roc_auc = roc_auc_score(y_test, clf.predict_proba(X_test_tf)[:, 1])\n",
        "        prc_auc = average_precision_score(y_test, clf.predict_proba(X_test_tf)[:, 1])\n",
        "    elif hasattr(clf, 'decision_function'):\n",
        "        # For classifiers with a decision_function method, use it to get decision scores\n",
        "        roc_auc = roc_auc_score(y_test, clf.decision_function(X_test_tf))\n",
        "        prc_auc = average_precision_score(y_test, clf.decision_function(X_test_tf))\n",
        "    else:\n",
        "        # For classifiers without a predict_proba or decision_function method, skip ROC AUC and PRC AUC\n",
        "        roc_auc = None\n",
        "        prc_auc = None\n",
        "    \n",
        "    results = results.append({'Classifier': clf_name, \n",
        "                              'Accuracy': accuracy, \n",
        "                              'F1-Score': f1, \n",
        "                              'Cohen’s Kappa': cohen_kappa, \n",
        "                              'ROC AUC': roc_auc, \n",
        "                              'PRC AUC': prc_auc}, ignore_index=True)\n",
        "\n",
        "# Print the results DataFrame\n",
        "print(results)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LCRW9A_wzIpP"
      },
      "source": [
        "# Step 6\n",
        "SMOTE Algorithm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "99fsR8e0mTtp",
        "outputId": "115e3408-b762-4b02-e975-c31f59d5593c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Size of Training Data  36035\n",
            "Size of Test Data  9009\n"
          ]
        }
      ],
      "source": [
        "# split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(df['Text'], df['Target_priority'], test_size=0.2, random_state=42, stratify = df['Target_priority'])\n",
        "\n",
        "print('Size of Training Data ', X_train.shape[0])\n",
        "print('Size of Test Data ', X_test.shape[0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VIhGt6OKnDXG"
      },
      "outputs": [],
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "\n",
        "# Fit and transform the training data\n",
        "tfidf = TfidfVectorizer(min_df = 10, ngram_range=(1,2), stop_words=\"english\")\n",
        "X_train_counts = tfidf.fit_transform(X_train)\n",
        "X_test_tf = tfidf.transform(X_test)\n",
        "\n",
        "# Apply SMOTE to the training data to balance the classes\n",
        "smote = SMOTE()\n",
        "X_train_tf, y_train = smote.fit_resample(X_train_counts, y_train)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yICxKaBVrADL",
        "outputId": "9cc196f4-07e2-4996-de54-52efd4cd60fe"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Size of Training Data  63198\n",
            "Size of Test Data  9009\n"
          ]
        }
      ],
      "source": [
        "print('Size of Training Data ', X_train_tf.shape[0])\n",
        "print('Size of Test Data ', X_test_tf.shape[0])"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary packages\n",
        "from sklearn.metrics import accuracy_score, f1_score, cohen_kappa_score, roc_auc_score, average_precision_score\n",
        "from sklearn.svm import LinearSVC\n",
        "\n",
        "# Define classifiers *ORIGINAL\n",
        "classifiers = {'Logistic Regression': LogisticRegression(),\n",
        "               'Random Forest': RandomForestClassifier(),\n",
        "               'Naive Bayes': MultinomialNB(),\n",
        "               'Support Vector Machine': LinearSVC(),\n",
        "               'Trivial Classifier': DummyClassifier(strategy='most_frequent')}\n",
        "\n",
        "# Create empty DataFrame\n",
        "results = pd.DataFrame(columns=['Classifier', 'Accuracy', 'F1-Score', 'Cohen’s Kappa', 'ROC AUC', 'PRC AUC'])\n",
        "\n",
        "# Evaluate each classifier and store the results in the DataFrame\n",
        "for clf_name, clf in classifiers.items():\n",
        "    clf.fit(X_train_tf, y_train)\n",
        "    y_pred = clf.predict(X_test_tf)\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    f1 = f1_score(y_test, y_pred)\n",
        "    cohen_kappa = cohen_kappa_score(y_test, y_pred)\n",
        "    if hasattr(clf, 'predict_proba'):\n",
        "        # For classifiers with a predict_proba method, use it to get decision scores\n",
        "        roc_auc = roc_auc_score(y_test, clf.predict_proba(X_test_tf)[:, 1])\n",
        "        prc_auc = average_precision_score(y_test, clf.predict_proba(X_test_tf)[:, 1])\n",
        "    elif hasattr(clf, 'decision_function'):\n",
        "        # For classifiers with a decision_function method, use it to get decision scores\n",
        "        roc_auc = roc_auc_score(y_test, clf.decision_function(X_test_tf))\n",
        "        prc_auc = average_precision_score(y_test, clf.decision_function(X_test_tf))\n",
        "    else:\n",
        "        # For classifiers without a predict_proba or decision_function method, skip ROC AUC and PRC AUC\n",
        "        roc_auc = None\n",
        "        prc_auc = None\n",
        "    \n",
        "    results = results.append({'Classifier': clf_name, \n",
        "                              'Accuracy': accuracy, \n",
        "                              'F1-Score': f1, \n",
        "                              'Cohen’s Kappa': cohen_kappa, \n",
        "                              'ROC AUC': roc_auc, \n",
        "                              'PRC AUC': prc_auc}, ignore_index=True)\n",
        "\n",
        "# Print the results DataFrame\n",
        "print(results)"
      ],
      "metadata": {
        "id": "trwmbr3Y318c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2e960304-9214-4195-8076-ddbad65800b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "               Classifier  Accuracy  F1-Score  Cohen’s Kappa  ROC AUC  PRC AUC\n",
            "0  Logistic Regression    0.77      0.86      0.21           0.72     0.94    \n",
            "1  Random Forest          0.87      0.93      0.17           0.69     0.93    \n",
            "2  Naive Bayes            0.72      0.82      0.17           0.71     0.94    \n",
            "3  Support Vector Machine 0.79      0.88      0.18           0.68     0.93    \n",
            "4  Trivial Classifier     0.12      0.00      0.00           0.50     0.88    \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XJaP21CY1bwn"
      },
      "source": [
        "## STEP 7 : Conclusion\n",
        "\n",
        "As mentioned in class, accuracy is not a good metric to evaluate the performance of models with unbalanced dataset and this case is a clear example of this.\n",
        "Based on the results provided, it appears that the performance of the models varied depending on how the data was preprocessed. Here are some observations:\n",
        "\n",
        "\n",
        "Normal Data: \n",
        "The performance of all classifiers is similar, with accuracy ranging from 0.86 to 0.88.\n",
        "All classifiers achieve high F1-scores (0.93) indicating a good balance between precision and recall.\n",
        "Cohen’s kappa is low for all classifiers, indicating poor agreement between the predicted and actual values.\n",
        "PRC AUC is consistently high for all classifiers (ranging from 0.88 to 0.95) indicating good performance in identifying positive cases.\n",
        "ROC AUC varies from 0.50 (trivial classifier) to 0.73 (logistic regression).\n",
        "\n",
        "Undersampling the majority class: \n",
        "The performance of all classifiers is slightly worse compared to the normal data condition, with accuracy ranging from 0.84 to 0.86.\n",
        "All classifiers still achieve high F1-scores (ranging from 0.91 to 0.93).\n",
        "Cohen’s kappa is still low for all classifiers, indicating poor agreement between the predicted and actual values.\n",
        "PRC AUC is consistently high for all classifiers (ranging from 0.93 to 0.94).\n",
        "ROC AUC varies from 0.50 (trivial classifier) to 0.73 (logistic regression), similar to the normal data condition.\n",
        "\n",
        "Oversampling the minority class: \n",
        "The performance of most classifiers is much better compared to the normal data condition, with accuracy ranging from 0.84 to 0.99.\n",
        "All classifiers achieve very high F1-scores (ranging from 0.83 to 0.99), indicating a good balance between precision and recall.\n",
        "Cohen’s kappa is high for most classifiers (ranging from 0.56 to 0.98), indicating good agreement between the predicted and actual values.\n",
        "PRC AUC is consistently high for all classifiers (ranging from 0.88 to 1.00).\n",
        "ROC AUC is consistently high for all classifiers (ranging from 0.92 to 1.00).\n",
        "\n",
        "SMOTE: The performance of most classifiers is worse compared to the normal data condition, with accuracy ranging from 0.12 to 0.87.\n",
        "All classifiers still achieve high F1-scores (ranging from 0.00 to 0.93).\n",
        "Cohen’s kappa is low for all classifiers, indicating poor agreement between the predicted and actual values.\n",
        "PRC AUC is consistently high for all classifiers (ranging from 0.93 to 0.94).\n",
        "ROC AUC is lower compared to the normal data condition, ranging from 0.68 to 0.72.\n",
        "\n",
        "Overall, it appears that oversampling the minority class may be the best preprocessing strategy for this dataset, as it improved the performance of some models.In particular RANDOM FOREST performing almost perfect in all the metrics! However, it is important to note that the choice of preprocessing strategy may depend on the specific dataset and the models being used.\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3XID5NUAoEIU"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}